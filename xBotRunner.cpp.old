#include <stdio.h>
#include <string>
#include <vector>
#include <iostream>

#include <stdlib.h>

#include <signal.h>
// #include "xboxctrl.h"
#include "xBot.h"
#include <armadillo>
// #include <stdio.h>
#include <termios.h>
#include <unistd.h>
// #include <curses.h>
// #include <pthread.h>

// using namespace cv;
// using namespace std;

// vector<Rect> faces;

static int stopsig;
using namespace arma;
static xBot bot;

// static xboxctrl_t ctrl;
// static pthread_t thread;
// void *thread_ctrl_update(void *args) {
	// while (!stopsig) {
		// xboxctrl_update(&ctrl);
	// }
	// return NULL;
// }

int mygetch(void)
{
	struct termios oldt,
	newt;
	int ch;
	tcgetattr( STDIN_FILENO, &oldt );
	newt = oldt;
	newt.c_lflag &= ~( ICANON | ECHO );
	tcsetattr( STDIN_FILENO, TCSANOW, &newt );
	ch = getchar();
	tcsetattr( STDIN_FILENO, TCSANOW, &oldt );
	return ch;
}

void resetBot()
{
	int i=0;
	while (i<10)
	{
		printf("SENDING");
		i++;
			bot.reset();
		}
}

void stop(int signo)
{
	printf("yo\n");
	stopsig = 1;
	exit(1);
}

int main(int argc, char *argv[])
{

	signal(SIGINT, stop);

	while (true)
	{
		int write
		char x;
		x = mygetch();
		printf("getch: %c\n", x);

		if (x == 'A')
			bot.send(vec({0, 1, 0, 0,0}));
		else if (x == 'B')
			bot.send(vec({0, -1, 0, 0, 0}));
		else if ((x == 'C') || (x == 'D'))
			bot.send(vec({0, 0, 0, 0, 0}));

		bot.readClear();
	}
	return 0;
}
